#!/bin/bash

. "$(dirname "$(readlink --canonicalize "$0")")"/backup-read-config.sh

REFERENCE="$1"

info "Starting script"

# Where is the host located
backup-find-backend
backup-create-folders

ssh="ssh $BACKEND"

################################################################################
#
# Preparation / generate&upload config
#
################################################################################

remote_mysql_cnf="$($ssh mktemp --suffix=.cnf)"
remote_innodb_tables="$($ssh mktemp)"
remote_backup_dir="$($ssh mktemp --directory --tmpdir=\"${REMOTE_DIR}\")"

info "Generating mysql config"
mysql_cnf="${BACKUP_DIR}/my.cnf"
"$(dirname "$(readlink --canonicalize "$0")")"/backup-mysql-config.sh > "$mysql_cnf"

cat >>"$mysql_cnf" <<-ENDL
	
	[xtrabackup]
	#compress = quicklz
	stream = xbstream
	#stream = tar
	tmpdir = $remote_backup_dir
	target-dir = $remote_backup_dir
	extra-lsndir = $remote_backup_dir
	backup
	no-timestamp
ENDL

if [ -n "$REFERENCE" ]; then
	echo "incremental-lsn = $REFERENCE" >> "$mysql_cnf"
	info "  using incremental backup from lsn \"$REFERENCE\""
fi

info "Uploading mysql config"
cat "$mysql_cnf" | $ssh "cat > \"$remote_mysql_cnf\""


################################################################################
#
# InnoDB tables
#
################################################################################

# FIXME: try to find matching xtrabackup binary
if ! xtrabackup_bin="$($ssh 'which xtrabackup_51')" || ! $ssh "test -x '$xtrabackup_bin'"; then
	error "could not find xtrabackup binary or file not executable: (tried \"$xtrabackup_bin\")"
	exit $ERR_INNOBACKUP
fi

info "Starting InnoDB backup"
md5sum_file="${LOG_DIR}/$(basename "$BACKUP_INNODB").md5sum"
size_file="${LOG_DIR}/$(basename "$BACKUP_INNODB").size"
remote_error_file="$($ssh mktemp)"

$ssh "( $xtrabackup_bin --defaults-file=\"$remote_mysql_cnf\" \"$remote_backup_dir\" || echo \"\$?\" > \"$remote_error_file\") | $COMPRESS_BIN $COMPRESS_PARAMS" 2>"${LOG_DIR}/xtrabackup.log" |
tee >(md5sum | dd bs=32 count=1 > "$md5sum_file" 2>/dev/null) >(wc --bytes > "$size_file") > "$BACKUP_INNODB"

$ssh "test -s \"$remote_error_file\"" &&
error "Failed to create innodb backup, see log for more details" &&
exit $ERR_INNOBACKUP

$ssh "cat \"${remote_backup_dir}\"/xtrabackup_checkpoints" > "${MYSQL_DIR}/xtrabackup_checkpoints"

size_is="$(stat --format="%s" "$BACKUP_INNODB")"
size_should="$(< "$size_file")"
if (( size_is == size_should )); then
	info "  size OK"
else
	error "  size mismatch: is $size_is, should be $size_should"
	exit $ERR_INNOBACKUP
fi

info "  checking md5sum"
if [ "$(md5sum "$BACKUP_INNODB" | dd bs=32 count=1 2>/dev/null)" == "$(< $md5sum_file)" ]; then
	info "  md5sum OK"
else
	error "  md5sum mismatch, backup file seems to be corrupt"
	exit $ERR_INNOBACKUP
fi

# FIXME: check that everything is ok

################################################################################
#
# All table definitions and data except InnoDB data
#
################################################################################

function backup-mysql-fix-name() {
	local name="$1"
	
	# Ignore names without special chars
	[ "${name/@/}" == "$name" ] && echo $name && return
	
	# Translate basic ascii special chars
	#name="$(echo "$name" | sed 's/@\([0-9a-f]\{2\}\)\([0-9a-f]\{2\}\)/\\x\1\\x\2/g')"
	name="$(echo "$name" | sed 's/@\(00\)\([0-9a-f]\{2\}\)/\\x\1\\x\2/g')"
	
	# FIXME: translate all the other crap from http://dev.mysql.com/doc/refman/5.1/en/identifier-mapping.html
	# See also: http://www.skysql.com/blogs/kolbe/demystifying-identifier-mapping
	[ "${name/@/}" != "$name" ] && warn "database/table name \"$name\" stil contains untranslatable characters"
	
	echo -e "$name"
}

function backup-mysql-query() {
	local query="$1"
	local fd_to="$2"
	local fd_from="$3"
	local data
	local str="backupMySQLQuerySuccessToken"
	
	echo "$query" >&$fd_to
	echo "SELECT \"$str\";" >&$fd_to
	
	read -u $fd_from data
	while read -u $fd_from -t 0; do
		read -u $fd_from
		data+="$REPLY"
	done
	
	if [ "$data" != "$str" ]; then
		echo "${data/$str/}"
		return 1
	else
		return 0
	fi
}

fifo_dir="$(mktemp --directory)"
file_reader=7
mysql_control=8
mysql_result=9
mkfifo "$fifo_dir/in.fifo"
mkfifo "$fifo_dir/out.fifo"

info "Creating mysql control"
$ssh "mysql --defaults-file=\"$remote_mysql_cnf\" --skip-column-names --unbuffered --force" <"$fifo_dir/in.fifo" >"$fifo_dir/out.fifo" 2>&1 &

eval "exec $mysql_control>\"$fifo_dir/in.fifo\""
eval "exec $mysql_result<\"$fifo_dir/out.fifo\""

info "Flushing tables"
echo "FLUSH TABLES; SELECT \"flushed\";" >&$mysql_control
read -u $mysql_result
[ "$REPLY" != "flushed" ] && error "Failed to flush tables" && exit $ERR_MYSQL


tables_list="$(mktemp --tmpdir table-XXXXXXXX.lst)"
# A little fix as a normal while ... done < "$myisam_tables" did break after the first iteration
$ssh "cd \"${REMOTE_DIR}/image/var/lib/mysql\" ; ls */*.frm" | sed 's/\.frm$//g' > "$tables_list"

eval "exec $file_reader<\"$tables_list\""
tables_count=$(cat "$tables_list" | wc -l)
counter=0

while read -u $file_reader; do
	(( counter++ ))
	
	database_dir="${REPLY//\/*/}"
	table_file="${REPLY//*\//}"
	
	database="$(backup-mysql-fix-name "$database_dir")"
	table="$(backup-mysql-fix-name "$table_file")"
	
	info "Working on table $counter of $tables_count: \"$database.$table\""
	
	# Require global locking for table if table name still contains encoded special characters
	if [ "${database/@/}" != "${database}" ] || [ "${table/@/}" != "${table}" ]; then
		global_lock="yes"
		warn "  table \"$database.$table\" requires global lock"
	else
		global_lock=
	fi
	
	# Try table lock
	if [ -z "$global_lock" ]; then
		if ! lock_msg=$(backup-mysql-query "LOCK TABLE \`$database\`.\`$table\` READ;" $mysql_control $mysql_result); then
			# Fallback
			warn "failed to lock table \"$database.$table\", using global lock ($lock_msg)"
			global_lock="yes"
			
		else
			! flush_msg=$(backup-mysql-query  "FLUSH TABLE \`$database\`.\`$table\`;" $mysql_control $mysql_result) &&
			error "failed to flush table \"$database.$table\" ($flush_msg)" && exit $ERR_MYSQL
		fi
	fi
	
	# Retry with global lock
	if [ -n "$global_lock" ]; then
		! flush_msg=$(backup-mysql-query "FLUSH TABLES WITH READ LOCK;" $mysql_control $mysql_result) &&
		error "failed to flush tables with read lock ($flush_msg)" && exit $ERR_MYSQL
	fi
	
	for file_remote in $($ssh "ls \"${REMOTE_DIR}/image/var/lib/mysql/${database_dir}/${table_file}\".*"); do
		filename="$(basename "$file_remote")"
		file_local="${MYSQL_DIR}/$database_dir/$filename.${COMPRESS_EXT}"
		file_repo="${MYSQL_STATIC_DIR}/$database_dir/$filename.${COMPRESS_EXT}"
		
		# Skip innodb data files
		if [ "${file_remote%.ibd}" != "${file_remote}" ]; then
			info "  skipping InnoDB data file \"$database_dir/$filename\""
			continue
		fi
		
		
		date_remote=$($ssh "stat --format=%y \"$file_remote\"")
		mkdir --parent "$(dirname "$file_local")" "$(dirname "$file_repo")"
		
		# Look into static repository
		if [ -r "$file_repo" ]; then
			date_repo="$(stat --format=%y "$file_repo")"
			
			# Use file from repo, no downloading
			if [ "$date_remote" == "$date_repo" ]; then
				cp -l "$file_repo" "$file_local"
				info "  using file from repo for \"$database_dir/$filename\""
				continue
			fi
			
			rm -f "$file_repo"
		fi
		
		info "  transfering \"$database_dir/$filename\""
		$ssh "${COMPRESS_BIN} ${COMPRESS_PARAMS} --stdout "$file_remote"" > "$file_local"
		touch --date="$date_remote" "$file_local"
		cp -l "$file_local" "$file_repo"
	done
	
	! unlock_msg=$(backup-mysql-query "UNLOCK TABLES;" $mysql_control $mysql_result) &&
	error "failed to unlock table \"$database.$table\" ($unlock_msg)" && exit $ERR_MYSQL
done

################################################################################
#
# Cleanup
#
################################################################################
	
info "Finishing"
eval "exec $file_reader<&-"
eval "exec $mysql_control>&-"
eval "exec $mysql_result>&-"

$ssh "rm -Rf \"$remote_mysql_cnf\" \"$remote_innodb_tables\" \"$remote_backup_dir\""
rm -Rf "$fifo_dir"
