#!/bin/bash

. "$(dirname "$(readlink --canonicalize "$0")")"/backup-read-config.sh

REFERENCE="${1:-""}"

info "Starting script"

# Where is the host located
backup-find-backend
backup-create-folders

# Enable ssh multiplexing
ssh="ssh $BACKEND"
$ssh -f -M -N

################################################################################
#
# Preparation
#
################################################################################

# Local name of mysql config
mysql_cnf="${BACKUP_DIR}/my.cnf"

# Remote name of uploaded mysql config
remote_mysql_cnf="$($ssh mktemp --suffix=.cnf)"

# Put temporary backup data here
remote_backup_dir="$($ssh mktemp --directory --tmpdir=\"${REMOTE_DIR}\")"

# Store recorded size and md5sum of innodb backup here
innodb_size_file="${LOG_DIR}/$(basename "$BACKUP_INNODB").size"
innodb_md5sum_file="${LOG_DIR}/$(basename "$BACKUP_INNODB").md5sum"

# Write return value of innodb backup process here
remote_innodb_error_file="$($ssh mktemp)"

# All fifos for mysql pipelining here
fifo_dir="$(mktemp --directory)"

# Numbers of the file descriptors to use
file_reader=7
mysql_control=8
mysql_result=9

# Listing of all remote tables here
tables_list="$(mktemp --tmpdir table-XXXXXXXX.lst)"


function backup-mysql-cleanup() {
	info "cleaning up"
	
	eval "exec $file_reader<&-"
	eval "exec $mysql_control>&-"
	eval "exec $mysql_result>&-"
	
	$ssh "rm -Rf \"$remote_mysql_cnf\" \"$remote_backup_dir\" \"$remote_innodb_error_file\""
	rm -Rf "$fifo_dir" "$tables_list"
	
	$ssh -O exit >/dev/null 2>&1
	
	trap - INT TERM EXIT
	exit
}

trap "backup-mysql-cleanup" INT TERM EXIT


################################################################################
#
# Generate and upload mysql config
#
################################################################################

info "Generating mysql config"
"$(dirname "$(readlink --canonicalize "$0")")"/backup-mysql-config.sh > "$mysql_cnf"

cat >>"$mysql_cnf" <<-ENDL
	
	[xtrabackup]
	#compress = quicklz
	stream = xbstream
	#stream = tar
	tmpdir = $remote_backup_dir
	target-dir = $remote_backup_dir
	extra-lsndir = $remote_backup_dir
	backup
	no-timestamp
ENDL

if [ -n "$REFERENCE" ]; then
	echo "incremental-lsn = $REFERENCE" >> "$mysql_cnf"
	info "  using incremental backup from lsn \"$REFERENCE\""
fi

info "Uploading mysql config"
cat "$mysql_cnf" | $ssh "cat > \"$remote_mysql_cnf\""


################################################################################
#
# InnoDB tables
#
################################################################################

# FIXME: try to find matching xtrabackup binary
if ! xtrabackup_bin="$($ssh 'which xtrabackup_51')" || ! $ssh "test -x '$xtrabackup_bin'"; then
	error "could not find xtrabackup binary or file not executable: (tried \"$xtrabackup_bin\")"
	exit $ERR_INNOBACKUP
fi

info "Starting InnoDB backup"

$ssh "( $xtrabackup_bin --defaults-file=\"$remote_mysql_cnf\" \"$remote_backup_dir\" || echo \"\$?\" > \"$remote_innodb_error_file\") | $COMPRESS_BIN $COMPRESS_PARAMS" 2>"${LOG_DIR}/xtrabackup.log" |
tee >(md5sum >"$innodb_md5sum_file" 2>/dev/null) >(wc --bytes > "$innodb_size_file") > "$BACKUP_INNODB"

$ssh "test -s \"$remote_innodb_error_file\"" &&
error "Failed to create innodb backup, see log for more details" &&
exit $ERR_INNOBACKUP

backup-verify "$BACKUP_INNODB" "$innodb_size_file" "$innodb_md5sum_file" || exit $ERR_INNOBACKUP

$ssh "cat \"${remote_backup_dir}\"/xtrabackup_checkpoints" > "${MYSQL_DIR}/xtrabackup_checkpoints"


################################################################################
#
# All table definitions and data except InnoDB data
#
################################################################################

mkfifo "$fifo_dir/in.fifo"
mkfifo "$fifo_dir/out.fifo"

info "Creating mysql control"
$ssh "mysql --defaults-file=\"$remote_mysql_cnf\" --skip-column-names --unbuffered --force" <"$fifo_dir/in.fifo" >"$fifo_dir/out.fifo" 2>&1 &

eval "exec $mysql_control>\"$fifo_dir/in.fifo\""
eval "exec $mysql_result<\"$fifo_dir/out.fifo\""

info "Flushing tables"
! flush_msg=$(backup-mysql-query "FLUSH TABLES;" $mysql_control $mysql_result) &&
	error "failed to flush tables: ($flush_msg)" && exit $ERR_MYSQL

# Generate tables listing
$ssh "cd \"${REMOTE_DIR}/image/var/lib/mysql\" ; ls */*.frm" | sed 's/\.frm$//g' > "$tables_list"

# A little fix as a normal while ... done < "$myisam_tables" did break after the first iteration
eval "exec $file_reader<\"$tables_list\""

tables_count=$(cat "$tables_list" | wc -l)
counter=0

while read -u $file_reader; do
	(( counter++ ))
	
	database_dir="${REPLY//\/*/}"
	table_file="${REPLY//*\//}"
	
	database="$(backup-mysql-fix-name "$database_dir")"
	table="$(backup-mysql-fix-name "$table_file")"
	
	info "Working on table $counter of $tables_count: \"$database.$table\""
	
	# Require global locking for table if table name still contains encoded special characters
	if [ "${database/@/}" != "${database}" ] || [ "${table/@/}" != "${table}" ]; then
		global_lock="yes"
		warn "  table \"$database.$table\" requires global lock"
	else
		global_lock=
	fi
	
	# Try table lock
	if [ -z "$global_lock" ]; then
		if ! lock_msg=$(backup-mysql-query "LOCK TABLE \`$database\`.\`$table\` READ;" $mysql_control $mysql_result); then
			# Fallback
			warn "failed to lock table \"$database.$table\", using global lock ($lock_msg)"
			global_lock="yes"
			
		else
			! flush_msg=$(backup-mysql-query  "FLUSH TABLE \`$database\`.\`$table\`;" $mysql_control $mysql_result) &&
			error "failed to flush table \"$database.$table\" ($flush_msg)" && exit $ERR_MYSQL
		fi
	fi
	
	# Retry with global lock
	if [ -n "$global_lock" ]; then
		! flush_msg=$(backup-mysql-query "FLUSH TABLES WITH READ LOCK;" $mysql_control $mysql_result) &&
		error "failed to flush tables with read lock ($flush_msg)" && exit $ERR_MYSQL
	fi
	
	for file_remote in $($ssh "ls \"${REMOTE_DIR}/image/var/lib/mysql/${database_dir}/${table_file}\".*"); do
		filename="$(basename "$file_remote")"
		file_local="${MYSQL_DIR}/$database_dir/$filename.${COMPRESS_EXT}"
		file_repo="${MYSQL_STATIC_DIR}/$database_dir/$filename.${COMPRESS_EXT}"
		
		# Skip innodb data files
		if [ "${file_remote%.ibd}" != "${file_remote}" ]; then
			info "  skipping InnoDB data file \"$database_dir/$filename\""
			continue
		fi
		
		
		date_remote=$($ssh "stat --format=%y \"$file_remote\"")
		mkdir --parent "$(dirname "$file_local")" "$(dirname "$file_repo")"
		
		# Look into static repository
		if [ -r "$file_repo" ]; then
			date_repo="$(stat --format=%y "$file_repo")"
			
			# Use file from repo, no downloading
			if [ "$date_remote" == "$date_repo" ]; then
				cp -l "$file_repo" "$file_local"
				info "  using file from repo for \"$database_dir/$filename\""
				continue
			fi
			
			rm -f "$file_repo"
		fi
		
		info "  transfering \"$database_dir/$filename\""
		$ssh "${COMPRESS_BIN} ${COMPRESS_PARAMS} --stdout "$file_remote"" > "$file_local"
		touch --date="$date_remote" "$file_local"
		cp -l "$file_local" "$file_repo"
	done
	
	! unlock_msg=$(backup-mysql-query "UNLOCK TABLES;" $mysql_control $mysql_result) &&
	error "failed to unlock table \"$database.$table\" ($unlock_msg)" && exit $ERR_MYSQL
done
