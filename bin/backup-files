#!/bin/bash

. "$(dirname "$(readlink --canonicalize "$0")")"/backup-read-config.sh

# Where is the host located
backup-find-backend

# Prepare all folders
backup-create-folders

################################################################################
#
# PROGRAMS
#
################################################################################

fakeroot_cmd=()

# Check fakeroot
if [ "${FAKEROOT,,*}" == "yes" ]; then
	info "Enabling fakeroot"
	
	
	if ! fakeroot_bin="$(which fakeroot)" || [ ! -x "$fakeroot_bin" ]; then
		error "No fakeroot binary found or binary not executable (which returned: \"$fakeroot_bin\")!"
		exit $ERR_FAKEROOT
	fi
	
	fakeroot_cmd=( "$fakeroot_bin" -i "${FAKEROOT_STATUS}" -s "$FAKEROOT_STATUS" -- )
else
	fakeroot_cmd=( "env" )
fi

# Check rsync
if [ ! -x "$RSYNC_BIN" ]; then
	error "No rsync binary found or binary not executable (binary to use: \"$RSYNC_BIN\")!"
	exit $ERR_RSYNC
fi

rsync_cmd=( "$RSYNC_BIN" ${RSYNC_PARAMS} )

# Check exclude list
if [ -r "${RSYNC_EXCLUDE_DEFAULT}" ]; then
	info "using exclude file \"${RSYNC_EXCLUDE_DEFAULT}\"."
	rsync_cmd=( "${rsync_cmd[@]}" "--exclude-from=${RSYNC_EXCLUDE_DEFAULT}" )
else
	info "exclude file \"${RSYNC_EXCLUDE_DEFAULT}\" not found/readable!"
fi

if [ -r "${RSYNC_EXCLUDE_HOST}" ]; then
	info "using exclude file \"${RSYNC_EXCLUDE_HOST}\"."
	rsync_cmd=( "${rsync_cmd[@]}" "--exclude-from=${RSYNC_EXCLUDE_HOST}" )
else
	info "exclude file \"${RSYNC_EXCLUDE_HOST}\" not found/readable!"
fi

rsync_cmd=( "${rsync_cmd[@]}" "--rsh=ssh -F $HOME/.ssh/config-backup" "$BACKEND:${REMOTE_DIR}" "${MIRROR_DIR}" )

# Tar
if [ ! -x "$TAR_BIN" ]; then
	error "No tar binary found or binary not executable (binary to use: \"$TAR_BIN\")!"
	exit $ERR_TAR
fi

tar_cmd=( "$TAR_BIN" --create $TAR_PARAMS "--listed-incremental=${SNAPSHOT_FILE}" "--index-file=${STATUS_DIR}/listing" "--directory=$(dirname "${MIRROR_DIR}")" )

if [ -L "${STATUS_DIR}/reference" ]; then
	info "creating incremental backup, using reference \"$(readlink "${STATUS_DIR}/reference")\"."
	cp -a "${STATUS_DIR}"/reference/data/"$(basename "${SNAPSHOT_FILE}")" "${SNAPSHOT_FILE}" || ( error "failed to copy reference file!" ; exit $ERR_TAR )
fi

tar_cmd=( "${tar_cmd[@]}" "$HOST" )

################################################################################
#
#
#
################################################################################

size_file="${STATUS_DIR}/$(basename "${BACKUP_TAR}").size"
md5_file="${STATUS_DIR}/$(basename "${BACKUP_TAR}").md5sum"

info "executing '${fakeroot_cmd[@]} ${rsync_cmd[@]}'"
"${fakeroot_cmd[@]}" "${rsync_cmd[@]}" >"${STATUS_DIR}/rsync-stdout.log" 2>"${STATUS_DIR}/rsync-stderr.log"
errno=$?

if (( errno == 24 )); then
	warn "rsync could not transfer all files as some seem to have vanished (return code 24)"

elif (( errno != 0 )); then
	error "rsync failed: $errno"
	exit $ERR_RSYNC
fi

info "executing '${fakeroot_cmd[@]} ${tar_cmd[@]}'"
"${fakeroot_cmd[@]}" "${tar_cmd[@]}" 2>"${STATUS_DIR}/tar-stderr.log" |
	"${COMPRESS_BIN}" $COMPRESS_PARAMS |
	tee >(wc --bytes > "$size_file") >(md5sum >"$md5_file") >"${BACKUP_TAR}"
errno=$?

if (( errno != 0 )); then
	error "tar failed: $errno"
	exit $ERR_TAR
fi

info "verifying backup"
backup-verify "${BACKUP_TAR}" "$size_file" "$md5_file" || exit $ERR_TAR

info "compressing log files"
"${COMPRESS_BIN}" $COMPRESS_PARAMS "${STATUS_DIR}/rsync-stdout.log" "${STATUS_DIR}/rsync-stderr.log" "${STATUS_DIR}/tar-stderr.log" "${STATUS_DIR}/listing"
